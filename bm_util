#!/usr/bin/python


# -------------------------------
# ridiculously simple bookmarking
# -------------------------------

# bm         - show a list of all bookmarks
# bm a       - add current folder to list of bookmarks
# bm id	     - cd to folder with id=id
# bm d id    - delete folder with id=id from bookmark list
# bm c       - clear all dead bookmarks
# bm r       - renumber all bookmark ids
# bm f str   - find string str in all bookmark paths and cd to it
# bm s (id|name|hits|time) - sort the table by column

import os
import sys
import re
import sqlite3
import time

# --- GLOBALS ---

SCHEMA = """
BEGIN TRANSACTION
CREATE TABLE `bookmarks` (
    `bm_id` INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,
    `name`  TEXT,
    `path`  TEXT UNIQUE,
    `is_valid`  INTEGER DEFAULT 1 CHECK(is_valid="1" or is_valid = "0"),
    `hits`  INTEGER,
    `timestamp` TEXT
);
COMMIT;
END TRANSACTION
"""
DB_PATH = "~/.bookmarks.db"
TABLE_NAME = "bookmarks"

# --- GLOBALS END ---

class DatabaseManager(object):
    def __init__(self):
        self.conn = sqlite3.connect(os.path.expanduser(DB_PATH))
        try:
            self.conn.executescript(SCHEMA)
        except:
            pass
        self.cur = self.conn.cursor()

    def query(self, arg, tup):
        try:
            self.cur.execute(arg, tup)
        except sqlite3.IntegrityError:
            print "Folder already bookmarked!"
        self.conn.commit()
        return self.cur

    def __del__(self):
        self.conn.close()


def get_dir_name(path):
    r = re.search('.*/([^/]*)', path)
    return r.group(1)


def main():
    db = DatabaseManager()

    # 'bm'
    if len(sys.argv) < 2:
        print "Print list"

    # 'bm a'
    elif sys.argv[1] == 'a':
        bm_a(db)


    # 'bm d id'
    elif sys.argv[1] == 'd':
        # delete the given bookmark
        if len(sys.argv) == 3:
            id = int(sys.argv[2])
        else:
            print "To delete [5], type:\n\n\tbm d 5\n"
            exit()

        # delete_line(id)
        print "delete"

    else:
        # goto bookmark, if number is valid
        id = int(sys.argv[1])
        #line = get_line(id)
        #if line:
        #    goto = get_path_in_line(line)
        #    print shellquote(goto)
        print "cd"



# Interface functions
def bm():
    pass


def bm_a(db):
    bm_id = None
    bm_path = os.getcwd()
    bm_name = get_dir_name(bm_path)
    bm_isvalid = "1"
    bm_hits = "0"
    bm_timestamp = time.time()

    statement = "INSERT INTO " + TABLE_NAME + " VALUES (?, ?, ?, ?, ?, ?)"
    tup = (bm_id, bm_name, bm_path, bm_isvalid, bm_hits, bm_timestamp)
    db.query(statement, tup)


def bm_id(id=id):
    pass


def bm_d_id(id=id):
    pass


def bm_c():
    pass


def bm_r():
    pass


def bm_f_str():
    pass


def bm_s():
    pass


# Internal functions
def print_complete_table(sort="id"):
    pass


def change_directory(path="/home"):
    pass


def is_path_valid(path="/home"):
    pass



# Cursor row parsers (return strings)
def get_str_id(cursor="c"):
    pass

def get_str_name(cursor="c"):
    pass

def get_str_path(cursor="c"):
    pass

def get_str_hits(cursor="c"):
    pass

def get_str_time(cursor="c"):
    pass


# sqlite functions (returns cursors)
def get_cur_all_rows():
    pass


def get_cur_row(id=1):
    pass


def get_cur_row_find(str="str"):
    pass



# sqlite functions (return 1 = success or 0 = failure)
def del_row(id=1):
    pass

if __name__ == "__main__":
    main()
